---
import FrontPageLayout from '../layouts/FrontPageLayout.astro';
import { supabase } from '../lib/supabase';

// Check if user is already logged in
const { cookies, redirect } = Astro;
const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');
if (accessToken && refreshToken) {
  return redirect('/dashboard');
}

// Check for success message
const searchParams = Astro.url.searchParams;
const registered = searchParams.get('registered') === 'true';
---

<FrontPageLayout title="Login">
    <div class="container ignore-main">
        <div class="auth-form">
            <div class="main-content-title" style="animation: none;">Sign in to your account</div>
            <div class="main-content-box" style="animation: none;">
            <p style="margin-bottom: 20px; text-align: center;">
                Or <a href="/register">create a new account</a>
            </p>

            {registered && (
                <div class="success-message" role="alert" style="background-color: #4CAF50; color: white; padding: 10px; border-radius: 4px; margin-bottom: 20px; text-align: center;">
                Registration successful! Please check your email to verify your account.
                </div>
            )}

            <!-- Error Alert -->
            <div id="error-alert" class="error-message hidden" role="alert">
                <strong>Error!</strong>
                <span id="error-message"></span>
            </div>

        <form id="login-form">
          <div class="form-group">
            <label for="email">Email address</label>
            <input
              id="email"
              name="email"
              type="email"
              required
              placeholder="sonicthehedgehog@gmail.com"
            />
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input
              id="password"
              name="password"
              type="password"
              required
              placeholder="Il0veCh1l1Dogs123"
            />
          </div>
          <div class="form-actions">
            <button class="login-button" type="submit">Sign in</button>
          </div>
          <div class="form-actions" style="margin-top: 10px;">
            <button type="button" id="discord-login" class="discord-button login-button">
              <svg class="discord-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px; margin-right: 8px;">
                <path d="M20.317 4.37a19.791 19.791 0 00-4.885-1.515.074.074 0 00-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 00-5.487 0 12.64 12.64 0 00-.617-1.25.077.077 0 00-.079-.037A19.736 19.736 0 003.677 4.37a.07.07 0 00-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 00.031.057 19.9 19.9 0 005.993 3.03.078.078 0 00.084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 00-.041-.106 13.107 13.107 0 01-1.872-.892.077.077 0 01-.008-.128 10.2 10.2 0 00.372-.292.074.074 0 01.077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 01.078.01c.12.098.246.198.373.292a.077.077 0 01-.006.127 12.299 12.299 0 01-1.873.892.077.077 0 00-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 00.084.028 19.839 19.839 0 006.002-3.03.077.077 0 00.032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 00-.031-.03z"/>
              </svg>
              Sign in with Discord
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</FrontPageLayout>

<script>
    import { supabase } from '../lib/supabase';

const form = document.querySelector('#login-form');
const discordLoginButton = document.querySelector('#discord-login');
const errorAlert = document.querySelector('#error-alert');
const errorMessage = document.querySelector('#error-message');

const showError = (message: string) => {
  if (errorAlert && errorMessage) {
    errorMessage.textContent = message;
    errorAlert.classList.remove('hidden');
    // Log error to console for debugging
    console.error('Auth Error:', message);
  }
};

// Function to parse error from URL
const handleUrlError = () => {
  const params = new URLSearchParams(window.location.search);
  const error = params.get('error');
  if (error) {
    const errorMessages = {
      'no_auth_code': 'Authentication code missing. Please try again.',
      'auth_error': 'Failed to authenticate with Discord. Please try again.',
      'no_session': 'Failed to create session. Please try again.',
      'auth_callback_failed': 'Authentication callback failed. Please try again.'
    };
    showError(errorMessages[error] || 'Authentication failed. Please try again.');
  }
};

// Check for errors on page load
handleUrlError();

const handleDiscordAuth = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'discord',
      options: {
        skipBrowserRedirect: true // Prevent automatic redirect
      }
    });

    if (error) throw error;
    
    if (data?.url) {
      // Manually redirect to the URL provided by Supabase
      window.location.href = data.url;
    }
  } catch (error) {
    console.error('Discord login error:', error);
    showError('Failed to sign in with Discord');
  }
};

discordLoginButton?.addEventListener('click', handleDiscordAuth);

form?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData(e.target as HTMLFormElement);
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    
    if (error) throw error;
    
    if (data.session) {
      console.log('Login successful, storing session...');
      
      const response = await fetch('/api/auth/callback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          access_token: data.session.access_token,
          refresh_token: data.session.refresh_token,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to store session');
      }
      
      console.log('Session stored, redirecting to dashboard...');
      window.location.href = '/dashboard';
    }
  } catch (error: any) {
    console.error('Login error:', {
      message: error.message,
      status: error.status,
      name: error.name
    });
    showError(error.message || 'Failed to sign in');
  }
});
  </script>
  