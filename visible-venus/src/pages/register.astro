---
import FrontPageLayout from '../layouts/FrontPageLayout.astro';
import { supabase } from '../lib/supabase';

// Check if user is already logged in
const { cookies, redirect } = Astro;
const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');
if (accessToken && refreshToken) {
  return redirect('/profile');
}
---

<FrontPageLayout title="Register">
  <div class="container ignore-main">
    <div class="auth-form">
      <div class="main-content-title" style="animation: none;">Create a new account</div>
      <div class="main-content-box" style="animation: none;">
        <p style="margin-bottom: 20px; text-align: center;">
          Or <a href="/login">sign in to your existing account</a>
        </p>

        <!-- Error Alert -->
        <div id="error-alert" class="error-message hidden" role="alert">
          <strong>Error!</strong>
          <span id="error-message"></span>
        </div>

        <form id="register-form">
          <div class="form-group">
            <label for="username">Username</label>
            <input
              id="username"
              name="username"
              type="text"
              required
              placeholder="Sonic"
            />
          </div>
          <div class="form-group">
            <label for="email">Email address</label>
            <input
              id="email"
              name="email"
              type="email"
              required
              placeholder="sonicthehedgehog@gmail.com"
            />
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input
              id="password"
              name="password"
              type="password"
              required
              placeholder="Il0veCh1l1Dogs123"
            />
          </div>
          <div class="form-actions">
            <button class="login-button" type="submit" style="width: 100%;">Create account</button>
          </div>
          <!--<div class="form-actions" style="margin-top: 10px;">
            <button type="button" id="discord-register" class="discord-button login-button">
              <svg class="discord-icon" viewBox="0 0 24 24" fill="currentColor" style="width: 20px; height: 20px; margin-right: 8px;">
                <path d="M20.317 4.37a19.791 19.791 0 00-4.885-1.515.074.074 0 00-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 00-5.487 0 12.64 12.64 0 00-.617-1.25.077.077 0 00-.079-.037A19.736 19.736 0 003.677 4.37a.07.07 0 00-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 00.031.057 19.9 19.9 0 005.993 3.03.078.078 0 00.084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 00-.041-.106 13.107 13.107 0 01-1.872-.892.077.077 0 01-.008-.128 10.2 10.2 0 00.372-.292.074.074 0 01.077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 01.078.01c.12.098.246.198.373.292a.077.077 0 01-.006.127 12.299 12.299 0 01-1.873.892.077.077 0 00-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 00.084.028 19.839 19.839 0 006.002-3.03.077.077 0 00.032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 00-.031-.03z"/>
              </svg>
              Register with Discord
            </button>
          </div>-->
        </form>
      </div>
    </div>
  </div>
</FrontPageLayout>

<script>
    import { supabase } from '../lib/supabase';
  
    const form = document.querySelector('#register-form');
    const errorAlert = document.querySelector('#error-alert');
    const errorMessage = document.querySelector('#error-message');
  
    // Previous helper functions remain the same
    const showError = (message: string) => {
      if (errorAlert && errorMessage) {
        errorMessage.textContent = message;
        errorAlert.classList.remove('hidden');
      }
    };
  
    const hideError = () => {
      if (errorAlert) {
        errorAlert.classList.add('hidden');
      }
    };
  
    const validatePassword = (password: string) => {
      if (password.length < 8) {
        showError('Password must be at least 8 characters long.');
        return false;
      }
      return true;
    };
  
    const checkExistingUser = async (email: string, username: string) => {
      try {
        // First check for existing email in auth.users
        const { data: emailCheck, error: emailError } = await supabase
          .from('profiles')
          .select('email')
          .eq('email', email)
          .single();
  
        if (emailError && emailError.code !== 'PGRST116') {
          throw emailError;
        }
  
        if (emailCheck) {
          showError('The username or email address is already in use.');
          return false;
        }
  
        // Then check for existing username in profiles
        const { data: usernameCheck, error: usernameError } = await supabase
          .from('profiles')
          .select('username')
          .eq('username', username)
          .single();
  
        if (usernameError && usernameError.code !== 'PGRST116') {
          throw usernameError;
        }
  
        if (usernameCheck) {
          showError('The username or email address is already in use.');
          return false;
        }
  
        return true;
      } catch (error) {
        console.error('Error checking existing user:', error);
        showError('An error occurred while checking your details.');
        return false;
      }
    };
  
    form?.addEventListener('submit', async (e: Event) => {
        e.preventDefault();
        hideError();

        const formElement = e.target as HTMLFormElement;
        const formData = new FormData(formElement);
        
        const email = formData.get('email')?.toString().trim();
        const password = formData.get('password')?.toString();
        const username = formData.get('username')?.toString().trim();

        if (!email || !password || !username) {
            showError('All fields are required.');
            return;
        }

        // Validate password client-side
        if (!validatePassword(password)) return;

        try {
            // Check for existing email and username
            const isValid = await checkExistingUser(email, username);
            if (!isValid) return;

            // Proceed with signup if validations pass
            const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
            email,
            password,
            options: {
                data: {
                display_name: username,
                username: username
                }
            }
            });

            if (signUpError) throw signUpError;

            if (signUpData?.user) {
            // Insert only the required fields into profiles table
            const { error: profileError } = await supabase
                .from('profiles')
                .insert([
                { 
                    id: signUpData.user.id, 
                    email, 
                    username
                }
                ])
                .single();

            if (profileError) throw profileError;

            // Redirect to login page with success message
            window.location.href = '/login?registered=true';
            }
        } catch (error) {
            console.error('Error signing up:', error);
            showError(error.message || 'Failed to create account. Please try again.');
        }
        });
  
        const discordRegisterButton = document.querySelector('#discord-register');

        const handleDiscordAuth = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'discord',
      options: {
        skipBrowserRedirect: true, // Prevent automatic redirect
        queryParams: {
          registration: 'true'
        }
      }
    });

    if (error) throw error;
    
    if (data?.url) {
      // Manually redirect to the URL provided by Supabase
      window.location.href = data.url;
    }
  } catch (error) {
    console.error('Discord registration error:', error);
    showError('Failed to register with Discord');
  }
};

discordRegisterButton?.addEventListener('click', handleDiscordAuth);
  </script>