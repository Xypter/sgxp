---
import FrontPageLayout from '../layouts/FrontPageLayout.astro';
import { supabase } from '../lib/supabaseClient';
import postgres from 'postgres';

// Debugging: Log connection string
const connectionString = `postgres://${import.meta.env.POSTGRES_USER}:${import.meta.env.POSTGRES_PASSWORD}@${import.meta.env.POSTGRES_HOST}:${import.meta.env.POSTGRES_PORT}/${import.meta.env.POSTGRES_DATABASE}`;
console.log('Postgres Connection String:', connectionString);

// Initialize the SQL connection
const sql = postgres(connectionString);

const { cookies, redirect } = Astro;

// Get session
const accessToken = cookies.get('sb-access-token');
const refreshToken = cookies.get('sb-refresh-token');

console.log('Access Token:', accessToken?.value);
console.log('Refresh Token:', refreshToken?.value);

if (!accessToken || !refreshToken) {
    return redirect('/login');
}

// Set up Supabase session
const { data: { user }, error } = await supabase.auth.getUser(accessToken.value);

console.log('Supabase User:', user);
console.log('Supabase Error:', error);

if (error || !user) {
    cookies.delete('sb-access-token', { path: '/' });
    cookies.delete('sb-refresh-token', { path: '/' });
    return redirect('/login');
}

// Get updated user data
const { data: { user: updatedUser }, error: userError } = await supabase.auth.getUser(accessToken.value);

console.log('Updated User:', updatedUser);
console.log('User Error:', userError);

if (userError || !updatedUser) {
    cookies.delete('sb-access-token', { path: '/' });
    cookies.delete('sb-refresh-token', { path: '/' });
    return redirect('/login');
}

// Debugging: Log updated user ID
console.log('Updated User ID:', updatedUser.id);

// Ensure the `avatar` column exists in the `auth.users` table
try {
    await sql`
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 
                FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'avatar'
            ) THEN
                ALTER TABLE auth.users ADD COLUMN avatar TEXT;
            END IF;
        END $$;
    `;
} catch (error) {
    console.error('Error ensuring avatar column exists:', error);
    cookies.delete('sb-access-token', { path: '/' });
    cookies.delete('sb-refresh-token', { path: '/' });
    return redirect('/login');
}

// Fetch the user's avatar from the PostgreSQL database
let dbUser;
try {
    const result = await sql`
        SELECT avatar FROM auth.users WHERE id = ${updatedUser.id}
    `;
    console.log('Query Result:', result);
    dbUser = result[0] || null; // Default to null if no rows are returned
} catch (error) {
    console.error('Database query error:', error);
    cookies.delete('sb-access-token', { path: '/' });
    cookies.delete('sb-refresh-token', { path: '/' });
    return redirect('/login');
}

const username = updatedUser.user_metadata?.full_name || updatedUser.user_metadata?.username || updatedUser.email;
const avatar_url = dbUser?.avatar || 'https://cdn.sgxp.me/sgxp_default.png';

const ALLOWED_TYPES = ['image/jpeg', 'image/png'];
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

const apiUrl = import.meta.env.DEV ? 'http://localhost:4321/api/upload' : '/api/upload';
---

<FrontPageLayout title="Settings">
    <div class="container ignore-main" style="max-width: 1200px; margin: 0 auto;">
        <div class="main-content">
            <div class="main-content-title">User Settings</div>
            <!-- Error Alert -->
            <div id="error-alert" class="error-message hidden" role="alert">
                <strong>Error!</strong>
                <span id="error-message"></span>
            </div>
            <div class="main-content-box">
                <!-- Display Name Section -->
                <div class="settings-section">
                    <h3 class="settings-title">Display Name</h3>
                    <div class="settings-content">
                        <input 
                            type="text" 
                            id="display-name" 
                            value={username}
                            class="settings-input"
                            placeholder="Enter your display name"
                        />
                        <button id="update-name" class="login-button">Update Name</button>
                    </div>
                </div>

                <!-- Profile Picture Section -->
                <div class="settings-section">
                    <h3 class="settings-title">Profile Picture</h3>
                    <div class="settings-content">
                        <div class="avatar-preview">
                            <img 
                                src={avatar_url} 
                                alt="Profile" 
                                id="avatar-preview"
                                style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;"
                            />
                        </div>
                        <input 
                            type="file" 
                            id="avatar-upload" 
                            accept={ALLOWED_TYPES.join(',')}
                            style="margin: 10px 0;"
                        />
                        <div class="text-sm text-gray-600">
                            Max size: {(MAX_FILE_SIZE / 1024 / 1024).toFixed(1)}MB. 
                            Allowed types: JPEG, PNG, WebP
                        </div>
                        <button id="update-avatar" class="login-button">Update Picture</button>
                    </div>
                </div>

                <!-- Password Section -->
                <div class="settings-section">
                    <h3 class="settings-title">Change Password</h3>
                    <div class="settings-content">
                        <input 
                            type="password" 
                            id="current-password" 
                            class="settings-input"
                            placeholder="Current password"
                        />
                        <input 
                            type="password" 
                            id="new-password" 
                            class="settings-input"
                            placeholder="New password"
                        />
                        <input 
                            type="password" 
                            id="confirm-password" 
                            class="settings-input"
                            placeholder="Confirm new password"
                        />
                        <button id="update-password" class="login-button">Update Password</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</FrontPageLayout>

<script is:inline type="module" define:vars={{ userId: user.id, apiUrl }}>
    // Initialize avatar preview with current URL
    const avatarPreview = document.getElementById('avatar-preview');
    if (avatarPreview) {
        console.log('Setting avatar URL:', '${avatar_url}');
        avatarPreview.src = `${avatar_url}`;
    }

    // Error handling function
    const showError = (message) => {
        const errorAlert = document.getElementById('error-alert');
        const errorMessage = document.getElementById('error-message');
        if (errorAlert && errorMessage) {
            errorMessage.textContent = message;
            errorAlert.classList.remove('hidden');
            // Auto-hide after 5 seconds
            setTimeout(() => {
                errorAlert.classList.add('hidden');
            }, 5000);
        }
    };

    const updateUserProfile = async (data) => {
        const response = await fetch('/api/auth/update-profile', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Cookie': document.cookie
            },
            body: JSON.stringify(data),
            credentials: 'include'
        });
        
        const responseText = await response.text();
        let errorData;
        try {
            errorData = JSON.parse(responseText);
        } catch (e) {
            throw new Error(`Failed to update profile: ${responseText}`);
        }
        
        if (!response.ok) {
            throw new Error(errorData.error || 'Failed to update profile');
        }
        return errorData;
    };

    // Update Display Name
    document.getElementById('update-name')?.addEventListener('click', async () => {
        const newName = document.getElementById('display-name')?.value;
        if (!newName) return;

        try {
            await updateUserProfile({ full_name: newName });
            alert('Display name updated successfully!');
        } catch (error) {
            console.error('Error updating name:', error);
            showError(error?.message || 'Failed to update display name');
        }
    });

    // Update Avatar
    document.getElementById('update-avatar')?.addEventListener('click', async () => {
        const fileInput = document.getElementById('avatar-upload');
        const file = fileInput?.files?.[0];
        if (!file) return;

        const updateButton = document.getElementById('update-avatar');
        if (!updateButton) return;
        updateButton.disabled = true;
        updateButton.textContent = 'Uploading...';

        try {
            // Create form data for upload
            const formData = new FormData();
            formData.append('file', file);
            formData.append('userId', userId);
            formData.append('type', 'avatar');

            // Upload to R2 via API endpoint
            console.log('Sending upload request to:', apiUrl);
            const response = await fetch(apiUrl, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json',
                }
            });

            console.log('Response status:', response.status);
            if (!response.ok) {
                const text = await response.text();
                console.error('Server response:', text);
                throw new Error('Failed to upload image: ' + text);
            }

            const { url } = await response.json();

            // Update user metadata with new URL
            await updateUserProfile({ avatar_url: url });
            
            // Update preview
            const preview = document.getElementById('avatar-preview');
            if (preview) preview.src = url;
            
            // Update the avatar in the navigation bar
            const navAvatar = document.querySelector('.user-avatar');
            if (navAvatar) {
                navAvatar.src = url;
            }
            
            // Show success message
            const successMessage = document.createElement('div');
            successMessage.className = 'success-message';
            successMessage.textContent = 'Profile picture updated successfully!';
            document.querySelector('.settings-content')?.prepend(successMessage);
            
            // Remove success message after 3 seconds
            setTimeout(() => {
                successMessage.remove();
            }, 3000);
        } catch (error) {
            console.error('Error updating avatar:', error);
            showError(error?.message || 'Failed to update profile picture');
        } finally {
            updateButton.disabled = false;
            updateButton.textContent = 'Update Picture';
        }
    });

    // Update Password
    document.getElementById('update-password')?.addEventListener('click', async () => {
        const currentPassword = document.getElementById('current-password')?.value;
        const newPassword = document.getElementById('new-password')?.value;
        const confirmPassword = document.getElementById('confirm-password')?.value;

        if (!currentPassword || !newPassword || !confirmPassword) {
            showError('Please fill in all password fields');
            return;
        }

        if (newPassword !== confirmPassword) {
            showError('New passwords do not match');
            return;
        }

        try {
            await updateUserProfile({ password: newPassword });
            
            // Clear password fields
            ['current-password', 'new-password', 'confirm-password'].forEach(id => {
                const input = document.getElementById(id);
                if (input) input.value = '';
            });
            
            alert('Password updated successfully!');
        } catch (error) {
            console.error('Error updating password:', error);
            showError(error?.message || 'Failed to update password');
        }
    });
</script>

<style>
    .error-message {
        background-color: #f44336;
        color: white;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .success-message {
        background-color: #4CAF50;
        color: white;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
        text-align: center;
    }
    
    .hidden {
        display: none;
    }
</style>